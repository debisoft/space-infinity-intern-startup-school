# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Message types

class MessageOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Message create method"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MessageCreateInput(MessageOptionalCreateInput):
    """Required arguments to the Message create method"""
    text: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MessageOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Message create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MessageCreateWithoutRelationsInput(MessageOptionalCreateWithoutRelationsInput):
    """Required arguments to the Message create method, without relations"""
    text: _str

class MessageConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MessageCreateWithoutRelationsInput'
    where: 'MessageWhereUniqueInput'

class MessageCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageCreateWithoutRelationsInput'
    connect: 'MessageWhereUniqueInput'
    connect_or_create: 'MessageConnectOrCreateWithoutRelationsInput'


class MessageCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MessageCreateWithoutRelationsInput', List['MessageCreateWithoutRelationsInput']]
    connect: Union['MessageWhereUniqueInput', List['MessageWhereUniqueInput']]
    connect_or_create: Union['MessageConnectOrCreateWithoutRelationsInput', List['MessageConnectOrCreateWithoutRelationsInput']]

_MessageWhereUnique_id_Input = TypedDict(
    '_MessageWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MessageWhereUniqueInput = _MessageWhereUnique_id_Input


class MessageUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    text: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MessageUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    text: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MessageUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MessageCreateWithoutRelationsInput']
    connect: List['MessageWhereUniqueInput']
    connect_or_create: List['MessageConnectOrCreateWithoutRelationsInput']
    set: List['MessageWhereUniqueInput']
    disconnect: List['MessageWhereUniqueInput']
    delete: List['MessageWhereUniqueInput']

    # TODO
    # update: List['MessageUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MessageUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MessageScalarWhereInput']
    # upsert: List['MessageUpserteWithWhereUniqueWithoutRelationsInput']


class MessageUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageCreateWithoutRelationsInput'
    connect: 'MessageWhereUniqueInput'
    connect_or_create: 'MessageConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MessageUpdateInput'
    # upsert: 'MessageUpsertWithoutRelationsInput'


class MessageUpsertInput(TypedDict):
    create: 'MessageCreateInput'
    update: 'MessageUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Message_id_OrderByInput = TypedDict(
    '_Message_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Message_text_OrderByInput = TypedDict(
    '_Message_text_OrderByInput',
    {
        'text': 'SortOrder',
    },
    total=True
)

_Message_createdAt_OrderByInput = TypedDict(
    '_Message_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Message_updatedAt_OrderByInput = TypedDict(
    '_Message_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Message_RelevanceInner = TypedDict(
    '_Message_RelevanceInner',
    {
        'fields': 'List[MessageScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Message_RelevanceOrderByInput = TypedDict(
    '_Message_RelevanceOrderByInput',
    {
        '_relevance': '_Message_RelevanceInner',
    },
    total=True
)

MessageOrderByInput = Union[
    '_Message_id_OrderByInput',
    '_Message_text_OrderByInput',
    '_Message_createdAt_OrderByInput',
    '_Message_updatedAt_OrderByInput',
    '_Message_RelevanceOrderByInput',
]



# recursive Message types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MessageRelationFilter = TypedDict(
    'MessageRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MessageListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MessageInclude(TypedDict, total=False):
    """Message relational arguments"""


    

class MessageIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""


class MessageIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""


class MessageIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""


class MessageIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""


class MessageIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class MessageArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyMessageArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class UserIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    Project: Union[bool, 'FindManyProjectArgsFromMessageRecursive1']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromMessageRecursive1']


class UserIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    Project: Union[bool, 'FindManyProjectArgsFromMessageRecursive2']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromMessageRecursive2']


class UserIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    Project: Union[bool, 'FindManyProjectArgsFromMessageRecursive3']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromMessageRecursive3']


class UserIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    Project: Union[bool, 'FindManyProjectArgsFromMessageRecursive4']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromMessageRecursive4']


class UserIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class UserArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyUserArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProjectIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    User: Union[bool, 'UserArgsFromMessageRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromMessageRecursive1']


class ProjectIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    User: Union[bool, 'UserArgsFromMessageRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromMessageRecursive2']


class ProjectIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    User: Union[bool, 'UserArgsFromMessageRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromMessageRecursive3']


class ProjectIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    User: Union[bool, 'UserArgsFromMessageRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromMessageRecursive4']


class ProjectIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class ProjectArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyProjectArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class SubmissionIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    Project: Union[bool, 'ProjectArgsFromMessageRecursive1']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromMessageRecursive1']


class SubmissionIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    Project: Union[bool, 'ProjectArgsFromMessageRecursive2']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromMessageRecursive2']


class SubmissionIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    Project: Union[bool, 'ProjectArgsFromMessageRecursive3']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromMessageRecursive3']


class SubmissionIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    Project: Union[bool, 'ProjectArgsFromMessageRecursive4']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromMessageRecursive4']


class SubmissionIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class SubmissionArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManySubmissionArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class FeedbackIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    User: Union[bool, 'UserArgsFromMessageRecursive1']
    Submission: Union[bool, 'SubmissionArgsFromMessageRecursive1']


class FeedbackIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    User: Union[bool, 'UserArgsFromMessageRecursive2']
    Submission: Union[bool, 'SubmissionArgsFromMessageRecursive2']


class FeedbackIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    User: Union[bool, 'UserArgsFromMessageRecursive3']
    Submission: Union[bool, 'SubmissionArgsFromMessageRecursive3']


class FeedbackIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    User: Union[bool, 'UserArgsFromMessageRecursive4']
    Submission: Union[bool, 'SubmissionArgsFromMessageRecursive4']


class FeedbackIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class FeedbackArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyFeedbackArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    


FindManyMessageArgs = FindManyMessageArgsFromMessage
FindFirstMessageArgs = FindManyMessageArgsFromMessage


    

class MessageWhereInput(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive1', List['MessageWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive1']
    OR: List['MessageWhereInputRecursive1']
    NOT: List['MessageWhereInputRecursive1']


class MessageWhereInputRecursive1(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive2', List['MessageWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive2']
    OR: List['MessageWhereInputRecursive2']
    NOT: List['MessageWhereInputRecursive2']


class MessageWhereInputRecursive2(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive3', List['MessageWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive3']
    OR: List['MessageWhereInputRecursive3']
    NOT: List['MessageWhereInputRecursive3']


class MessageWhereInputRecursive3(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive4', List['MessageWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive4']
    OR: List['MessageWhereInputRecursive4']
    NOT: List['MessageWhereInputRecursive4']


class MessageWhereInputRecursive4(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Message types


    

class MessageScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive1']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive1']


class MessageScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive2']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive2']


class MessageScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive3']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive3']


class MessageScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive4']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive4']


class MessageScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class MessageGroupByOutput(TypedDict, total=False):
    id: _str
    text: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'MessageSumAggregateOutput'
    _avg: 'MessageAvgAggregateOutput'
    _min: 'MessageMinAggregateOutput'
    _max: 'MessageMaxAggregateOutput'
    _count: 'MessageCountAggregateOutput'


class MessageAvgAggregateOutput(TypedDict, total=False):
    """Message output for aggregating averages"""


class MessageSumAggregateOutput(TypedDict, total=False):
    """Message output for aggregating sums"""


class MessageScalarAggregateOutput(TypedDict, total=False):
    """Message output including scalar fields"""
    id: _str
    text: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


MessageMinAggregateOutput = MessageScalarAggregateOutput
MessageMaxAggregateOutput = MessageScalarAggregateOutput


class MessageMaxAggregateInput(TypedDict, total=False):
    """Message input for aggregating by max"""
    id: bool
    text: bool
    createdAt: bool
    updatedAt: bool


class MessageMinAggregateInput(TypedDict, total=False):
    """Message input for aggregating by min"""
    id: bool
    text: bool
    createdAt: bool
    updatedAt: bool


class MessageNumberAggregateInput(TypedDict, total=False):
    """Message input for aggregating numbers"""


MessageAvgAggregateInput = MessageNumberAggregateInput
MessageSumAggregateInput = MessageNumberAggregateInput


MessageCountAggregateInput = TypedDict(
    'MessageCountAggregateInput',
    {
        'id': bool,
        'text': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

MessageCountAggregateOutput = TypedDict(
    'MessageCountAggregateOutput',
    {
        'id': int,
        'text': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


MessageKeys = Literal[
    'id',
    'text',
    'createdAt',
    'updatedAt',
]
MessageScalarFieldKeys = Literal[
    'id',
    'text',
    'createdAt',
    'updatedAt',
]
MessageScalarFieldKeysT = TypeVar('MessageScalarFieldKeysT', bound=MessageScalarFieldKeys)

MessageRelationalFieldKeys = _NoneType

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    password: Optional[_str]
    name: Optional[_str]
    Project: 'ProjectCreateManyNestedWithoutRelationsInput'
    Feedback: 'FeedbackCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    role: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    password: Optional[_str]
    name: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    role: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    password: Optional[_str]
    name: Optional[_str]
    role: _str
    Project: 'ProjectUpdateManyWithoutRelationsInput'
    Feedback: 'FeedbackUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    password: Optional[_str]
    name: Optional[_str]
    role: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_name_OrderByInput',
    '_User_role_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    Project: Union[bool, 'FindManyProjectArgsFromUser']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromUser']


    

class MessageIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class MessageIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class MessageIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class MessageIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class MessageIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Project: Union[bool, 'FindManyProjectArgsFromUserRecursive1']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Project: Union[bool, 'FindManyProjectArgsFromUserRecursive2']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Project: Union[bool, 'FindManyProjectArgsFromUserRecursive3']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Project: Union[bool, 'FindManyProjectArgsFromUserRecursive4']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProjectIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromUserRecursive1']


class ProjectIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromUserRecursive2']


class ProjectIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromUserRecursive3']


class ProjectIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromUserRecursive4']


class ProjectIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProjectArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProjectArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class SubmissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Project: Union[bool, 'ProjectArgsFromUserRecursive1']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromUserRecursive1']


class SubmissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Project: Union[bool, 'ProjectArgsFromUserRecursive2']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromUserRecursive2']


class SubmissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Project: Union[bool, 'ProjectArgsFromUserRecursive3']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromUserRecursive3']


class SubmissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Project: Union[bool, 'ProjectArgsFromUserRecursive4']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromUserRecursive4']


class SubmissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SubmissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySubmissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class FeedbackIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']
    Submission: Union[bool, 'SubmissionArgsFromUserRecursive1']


class FeedbackIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']
    Submission: Union[bool, 'SubmissionArgsFromUserRecursive2']


class FeedbackIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']
    Submission: Union[bool, 'SubmissionArgsFromUserRecursive3']


class FeedbackIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']
    Submission: Union[bool, 'SubmissionArgsFromUserRecursive4']


class FeedbackIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class FeedbackArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyFeedbackArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    Project: 'ProjectListRelationFilter'
    Feedback: 'FeedbackListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    Project: 'ProjectListRelationFilter'
    Feedback: 'FeedbackListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    Project: 'ProjectListRelationFilter'
    Feedback: 'FeedbackListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    Project: 'ProjectListRelationFilter'
    Feedback: 'FeedbackListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    Project: 'ProjectListRelationFilter'
    Feedback: 'FeedbackListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    password: _str
    name: _str
    role: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    password: _str
    name: _str
    role: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    password: bool
    name: bool
    role: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    password: bool
    name: bool
    role: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'password': bool,
        'name': bool,
        'role': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'password': int,
        'name': int,
        'role': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'role',
    'Project',
    'Feedback',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'role',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'Project',
        'Feedback',
    ]

# Project types

class ProjectOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Project create method"""
    id: _str
    registerDate: datetime.datetime
    userId: _str
    User: 'UserCreateNestedWithoutRelationsInput'
    Submission: 'SubmissionCreateManyNestedWithoutRelationsInput'


class ProjectCreateInput(ProjectOptionalCreateInput):
    """Required arguments to the Project create method"""
    name: _str
    oneLiner: _str
    description: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProjectOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Project create method, without relations"""
    id: _str
    registerDate: datetime.datetime
    userId: _str


class ProjectCreateWithoutRelationsInput(ProjectOptionalCreateWithoutRelationsInput):
    """Required arguments to the Project create method, without relations"""
    name: _str
    oneLiner: _str
    description: _str

class ProjectConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProjectCreateWithoutRelationsInput'
    where: 'ProjectWhereUniqueInput'

class ProjectCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProjectCreateWithoutRelationsInput'
    connect: 'ProjectWhereUniqueInput'
    connect_or_create: 'ProjectConnectOrCreateWithoutRelationsInput'


class ProjectCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProjectCreateWithoutRelationsInput', List['ProjectCreateWithoutRelationsInput']]
    connect: Union['ProjectWhereUniqueInput', List['ProjectWhereUniqueInput']]
    connect_or_create: Union['ProjectConnectOrCreateWithoutRelationsInput', List['ProjectConnectOrCreateWithoutRelationsInput']]

_ProjectWhereUnique_id_Input = TypedDict(
    '_ProjectWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ProjectWhereUniqueInput = _ProjectWhereUnique_id_Input


class ProjectUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    oneLiner: _str
    description: _str
    registerDate: datetime.datetime
    User: 'UserUpdateOneWithoutRelationsInput'
    Submission: 'SubmissionUpdateManyWithoutRelationsInput'


class ProjectUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    oneLiner: _str
    description: _str
    registerDate: datetime.datetime


class ProjectUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProjectCreateWithoutRelationsInput']
    connect: List['ProjectWhereUniqueInput']
    connect_or_create: List['ProjectConnectOrCreateWithoutRelationsInput']
    set: List['ProjectWhereUniqueInput']
    disconnect: List['ProjectWhereUniqueInput']
    delete: List['ProjectWhereUniqueInput']

    # TODO
    # update: List['ProjectUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProjectUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProjectScalarWhereInput']
    # upsert: List['ProjectUpserteWithWhereUniqueWithoutRelationsInput']


class ProjectUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProjectCreateWithoutRelationsInput'
    connect: 'ProjectWhereUniqueInput'
    connect_or_create: 'ProjectConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProjectUpdateInput'
    # upsert: 'ProjectUpsertWithoutRelationsInput'


class ProjectUpsertInput(TypedDict):
    create: 'ProjectCreateInput'
    update: 'ProjectUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Project_id_OrderByInput = TypedDict(
    '_Project_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Project_name_OrderByInput = TypedDict(
    '_Project_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Project_oneLiner_OrderByInput = TypedDict(
    '_Project_oneLiner_OrderByInput',
    {
        'oneLiner': 'SortOrder',
    },
    total=True
)

_Project_description_OrderByInput = TypedDict(
    '_Project_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Project_registerDate_OrderByInput = TypedDict(
    '_Project_registerDate_OrderByInput',
    {
        'registerDate': 'SortOrder',
    },
    total=True
)

_Project_userId_OrderByInput = TypedDict(
    '_Project_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Project_RelevanceInner = TypedDict(
    '_Project_RelevanceInner',
    {
        'fields': 'List[ProjectScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Project_RelevanceOrderByInput = TypedDict(
    '_Project_RelevanceOrderByInput',
    {
        '_relevance': '_Project_RelevanceInner',
    },
    total=True
)

ProjectOrderByInput = Union[
    '_Project_id_OrderByInput',
    '_Project_name_OrderByInput',
    '_Project_oneLiner_OrderByInput',
    '_Project_description_OrderByInput',
    '_Project_registerDate_OrderByInput',
    '_Project_userId_OrderByInput',
    '_Project_RelevanceOrderByInput',
]



# recursive Project types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProjectRelationFilter = TypedDict(
    'ProjectRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProjectListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProjectInclude(TypedDict, total=False):
    """Project relational arguments"""
    User: Union[bool, 'UserArgsFromProject']
    Submission: Union[bool, 'FindManySubmissionArgsFromProject']


    

class MessageIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""


class MessageIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""


class MessageIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""


class MessageIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""


class MessageIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class MessageArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyMessageArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class UserIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    Project: Union[bool, 'FindManyProjectArgsFromProjectRecursive1']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromProjectRecursive1']


class UserIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    Project: Union[bool, 'FindManyProjectArgsFromProjectRecursive2']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromProjectRecursive2']


class UserIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    Project: Union[bool, 'FindManyProjectArgsFromProjectRecursive3']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromProjectRecursive3']


class UserIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    Project: Union[bool, 'FindManyProjectArgsFromProjectRecursive4']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromProjectRecursive4']


class UserIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class UserArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyUserArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProjectIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    User: Union[bool, 'UserArgsFromProjectRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromProjectRecursive1']


class ProjectIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    User: Union[bool, 'UserArgsFromProjectRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromProjectRecursive2']


class ProjectIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    User: Union[bool, 'UserArgsFromProjectRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromProjectRecursive3']


class ProjectIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    User: Union[bool, 'UserArgsFromProjectRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromProjectRecursive4']


class ProjectIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class ProjectArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyProjectArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class SubmissionIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    Project: Union[bool, 'ProjectArgsFromProjectRecursive1']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromProjectRecursive1']


class SubmissionIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    Project: Union[bool, 'ProjectArgsFromProjectRecursive2']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromProjectRecursive2']


class SubmissionIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    Project: Union[bool, 'ProjectArgsFromProjectRecursive3']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromProjectRecursive3']


class SubmissionIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    Project: Union[bool, 'ProjectArgsFromProjectRecursive4']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromProjectRecursive4']


class SubmissionIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class SubmissionArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManySubmissionArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class FeedbackIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    User: Union[bool, 'UserArgsFromProjectRecursive1']
    Submission: Union[bool, 'SubmissionArgsFromProjectRecursive1']


class FeedbackIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    User: Union[bool, 'UserArgsFromProjectRecursive2']
    Submission: Union[bool, 'SubmissionArgsFromProjectRecursive2']


class FeedbackIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    User: Union[bool, 'UserArgsFromProjectRecursive3']
    Submission: Union[bool, 'SubmissionArgsFromProjectRecursive3']


class FeedbackIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    User: Union[bool, 'UserArgsFromProjectRecursive4']
    Submission: Union[bool, 'SubmissionArgsFromProjectRecursive4']


class FeedbackIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class FeedbackArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyFeedbackArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    


FindManyProjectArgs = FindManyProjectArgsFromProject
FindFirstProjectArgs = FindManyProjectArgsFromProject


    

class ProjectWhereInput(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    oneLiner: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    registerDate: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    Submission: 'SubmissionListRelationFilter'

    # should be noted that AND and NOT should be Union['ProjectWhereInputRecursive1', List['ProjectWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProjectWhereInputRecursive1']
    OR: List['ProjectWhereInputRecursive1']
    NOT: List['ProjectWhereInputRecursive1']


class ProjectWhereInputRecursive1(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    oneLiner: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    registerDate: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    Submission: 'SubmissionListRelationFilter'

    # should be noted that AND and NOT should be Union['ProjectWhereInputRecursive2', List['ProjectWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProjectWhereInputRecursive2']
    OR: List['ProjectWhereInputRecursive2']
    NOT: List['ProjectWhereInputRecursive2']


class ProjectWhereInputRecursive2(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    oneLiner: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    registerDate: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    Submission: 'SubmissionListRelationFilter'

    # should be noted that AND and NOT should be Union['ProjectWhereInputRecursive3', List['ProjectWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProjectWhereInputRecursive3']
    OR: List['ProjectWhereInputRecursive3']
    NOT: List['ProjectWhereInputRecursive3']


class ProjectWhereInputRecursive3(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    oneLiner: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    registerDate: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    Submission: 'SubmissionListRelationFilter'

    # should be noted that AND and NOT should be Union['ProjectWhereInputRecursive4', List['ProjectWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProjectWhereInputRecursive4']
    OR: List['ProjectWhereInputRecursive4']
    NOT: List['ProjectWhereInputRecursive4']


class ProjectWhereInputRecursive4(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    oneLiner: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    registerDate: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    Submission: 'SubmissionListRelationFilter'



# aggregate Project types


    

class ProjectScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    oneLiner: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    registerDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProjectScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProjectScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProjectScalarWhereWithAggregatesInputRecursive1']


class ProjectScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    oneLiner: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    registerDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProjectScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProjectScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProjectScalarWhereWithAggregatesInputRecursive2']


class ProjectScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    oneLiner: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    registerDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProjectScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProjectScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProjectScalarWhereWithAggregatesInputRecursive3']


class ProjectScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    oneLiner: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    registerDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProjectScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProjectScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProjectScalarWhereWithAggregatesInputRecursive4']


class ProjectScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    oneLiner: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    registerDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class ProjectGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    oneLiner: _str
    description: _str
    registerDate: datetime.datetime
    userId: _str
    _sum: 'ProjectSumAggregateOutput'
    _avg: 'ProjectAvgAggregateOutput'
    _min: 'ProjectMinAggregateOutput'
    _max: 'ProjectMaxAggregateOutput'
    _count: 'ProjectCountAggregateOutput'


class ProjectAvgAggregateOutput(TypedDict, total=False):
    """Project output for aggregating averages"""


class ProjectSumAggregateOutput(TypedDict, total=False):
    """Project output for aggregating sums"""


class ProjectScalarAggregateOutput(TypedDict, total=False):
    """Project output including scalar fields"""
    id: _str
    name: _str
    oneLiner: _str
    description: _str
    registerDate: datetime.datetime
    userId: _str


ProjectMinAggregateOutput = ProjectScalarAggregateOutput
ProjectMaxAggregateOutput = ProjectScalarAggregateOutput


class ProjectMaxAggregateInput(TypedDict, total=False):
    """Project input for aggregating by max"""
    id: bool
    name: bool
    oneLiner: bool
    description: bool
    registerDate: bool
    userId: bool


class ProjectMinAggregateInput(TypedDict, total=False):
    """Project input for aggregating by min"""
    id: bool
    name: bool
    oneLiner: bool
    description: bool
    registerDate: bool
    userId: bool


class ProjectNumberAggregateInput(TypedDict, total=False):
    """Project input for aggregating numbers"""


ProjectAvgAggregateInput = ProjectNumberAggregateInput
ProjectSumAggregateInput = ProjectNumberAggregateInput


ProjectCountAggregateInput = TypedDict(
    'ProjectCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'oneLiner': bool,
        'description': bool,
        'registerDate': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

ProjectCountAggregateOutput = TypedDict(
    'ProjectCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'oneLiner': int,
        'description': int,
        'registerDate': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


ProjectKeys = Literal[
    'id',
    'name',
    'oneLiner',
    'description',
    'registerDate',
    'userId',
    'User',
    'Submission',
]
ProjectScalarFieldKeys = Literal[
    'id',
    'name',
    'oneLiner',
    'description',
    'registerDate',
    'userId',
]
ProjectScalarFieldKeysT = TypeVar('ProjectScalarFieldKeysT', bound=ProjectScalarFieldKeys)

ProjectRelationalFieldKeys = Literal[
        'User',
        'Submission',
    ]

# Submission types

class SubmissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Submission create method"""
    id: _str
    projectId: _str
    progressRate: Optional[_int]
    progressComment: Optional[_str]
    outputUrl: Optional[_str]
    Project: 'ProjectCreateNestedWithoutRelationsInput'
    Feedback: 'FeedbackCreateManyNestedWithoutRelationsInput'


class SubmissionCreateInput(SubmissionOptionalCreateInput):
    """Required arguments to the Submission create method"""
    week: _int
    isActiveWeek: _bool
    submissionStatus: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SubmissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Submission create method, without relations"""
    id: _str
    projectId: _str
    progressRate: Optional[_int]
    progressComment: Optional[_str]
    outputUrl: Optional[_str]


class SubmissionCreateWithoutRelationsInput(SubmissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Submission create method, without relations"""
    week: _int
    isActiveWeek: _bool
    submissionStatus: _str

class SubmissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SubmissionCreateWithoutRelationsInput'
    where: 'SubmissionWhereUniqueInput'

class SubmissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SubmissionCreateWithoutRelationsInput'
    connect: 'SubmissionWhereUniqueInput'
    connect_or_create: 'SubmissionConnectOrCreateWithoutRelationsInput'


class SubmissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SubmissionCreateWithoutRelationsInput', List['SubmissionCreateWithoutRelationsInput']]
    connect: Union['SubmissionWhereUniqueInput', List['SubmissionWhereUniqueInput']]
    connect_or_create: Union['SubmissionConnectOrCreateWithoutRelationsInput', List['SubmissionConnectOrCreateWithoutRelationsInput']]

_SubmissionWhereUnique_id_Input = TypedDict(
    '_SubmissionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

SubmissionWhereUniqueInput = _SubmissionWhereUnique_id_Input


class SubmissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    week: Union[AtomicIntInput, _int]
    progressRate: Optional[Union[AtomicIntInput, _int]]
    progressComment: Optional[_str]
    outputUrl: Optional[_str]
    isActiveWeek: _bool
    submissionStatus: _str
    Project: 'ProjectUpdateOneWithoutRelationsInput'
    Feedback: 'FeedbackUpdateManyWithoutRelationsInput'


class SubmissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    week: Union[AtomicIntInput, _int]
    progressRate: Optional[Union[AtomicIntInput, _int]]
    progressComment: Optional[_str]
    outputUrl: Optional[_str]
    isActiveWeek: _bool
    submissionStatus: _str


class SubmissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SubmissionCreateWithoutRelationsInput']
    connect: List['SubmissionWhereUniqueInput']
    connect_or_create: List['SubmissionConnectOrCreateWithoutRelationsInput']
    set: List['SubmissionWhereUniqueInput']
    disconnect: List['SubmissionWhereUniqueInput']
    delete: List['SubmissionWhereUniqueInput']

    # TODO
    # update: List['SubmissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SubmissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SubmissionScalarWhereInput']
    # upsert: List['SubmissionUpserteWithWhereUniqueWithoutRelationsInput']


class SubmissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SubmissionCreateWithoutRelationsInput'
    connect: 'SubmissionWhereUniqueInput'
    connect_or_create: 'SubmissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SubmissionUpdateInput'
    # upsert: 'SubmissionUpsertWithoutRelationsInput'


class SubmissionUpsertInput(TypedDict):
    create: 'SubmissionCreateInput'
    update: 'SubmissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Submission_id_OrderByInput = TypedDict(
    '_Submission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Submission_projectId_OrderByInput = TypedDict(
    '_Submission_projectId_OrderByInput',
    {
        'projectId': 'SortOrder',
    },
    total=True
)

_Submission_week_OrderByInput = TypedDict(
    '_Submission_week_OrderByInput',
    {
        'week': 'SortOrder',
    },
    total=True
)

_Submission_progressRate_OrderByInput = TypedDict(
    '_Submission_progressRate_OrderByInput',
    {
        'progressRate': 'SortOrder',
    },
    total=True
)

_Submission_progressComment_OrderByInput = TypedDict(
    '_Submission_progressComment_OrderByInput',
    {
        'progressComment': 'SortOrder',
    },
    total=True
)

_Submission_outputUrl_OrderByInput = TypedDict(
    '_Submission_outputUrl_OrderByInput',
    {
        'outputUrl': 'SortOrder',
    },
    total=True
)

_Submission_isActiveWeek_OrderByInput = TypedDict(
    '_Submission_isActiveWeek_OrderByInput',
    {
        'isActiveWeek': 'SortOrder',
    },
    total=True
)

_Submission_submissionStatus_OrderByInput = TypedDict(
    '_Submission_submissionStatus_OrderByInput',
    {
        'submissionStatus': 'SortOrder',
    },
    total=True
)

_Submission_RelevanceInner = TypedDict(
    '_Submission_RelevanceInner',
    {
        'fields': 'List[SubmissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Submission_RelevanceOrderByInput = TypedDict(
    '_Submission_RelevanceOrderByInput',
    {
        '_relevance': '_Submission_RelevanceInner',
    },
    total=True
)

SubmissionOrderByInput = Union[
    '_Submission_id_OrderByInput',
    '_Submission_projectId_OrderByInput',
    '_Submission_week_OrderByInput',
    '_Submission_progressRate_OrderByInput',
    '_Submission_progressComment_OrderByInput',
    '_Submission_outputUrl_OrderByInput',
    '_Submission_isActiveWeek_OrderByInput',
    '_Submission_submissionStatus_OrderByInput',
    '_Submission_RelevanceOrderByInput',
]



# recursive Submission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SubmissionRelationFilter = TypedDict(
    'SubmissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SubmissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SubmissionInclude(TypedDict, total=False):
    """Submission relational arguments"""
    Project: Union[bool, 'ProjectArgsFromSubmission']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromSubmission']


    

class MessageIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""


class MessageIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""


class MessageIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""


class MessageIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""


class MessageIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class MessageArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManyMessageArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class UserIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    Project: Union[bool, 'FindManyProjectArgsFromSubmissionRecursive1']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromSubmissionRecursive1']


class UserIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    Project: Union[bool, 'FindManyProjectArgsFromSubmissionRecursive2']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromSubmissionRecursive2']


class UserIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    Project: Union[bool, 'FindManyProjectArgsFromSubmissionRecursive3']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromSubmissionRecursive3']


class UserIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    Project: Union[bool, 'FindManyProjectArgsFromSubmissionRecursive4']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromSubmissionRecursive4']


class UserIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class UserArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManyUserArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProjectIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    User: Union[bool, 'UserArgsFromSubmissionRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive1']


class ProjectIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    User: Union[bool, 'UserArgsFromSubmissionRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive2']


class ProjectIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    User: Union[bool, 'UserArgsFromSubmissionRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive3']


class ProjectIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    User: Union[bool, 'UserArgsFromSubmissionRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive4']


class ProjectIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class ProjectArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManyProjectArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class SubmissionIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    Project: Union[bool, 'ProjectArgsFromSubmissionRecursive1']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromSubmissionRecursive1']


class SubmissionIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    Project: Union[bool, 'ProjectArgsFromSubmissionRecursive2']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromSubmissionRecursive2']


class SubmissionIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    Project: Union[bool, 'ProjectArgsFromSubmissionRecursive3']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromSubmissionRecursive3']


class SubmissionIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    Project: Union[bool, 'ProjectArgsFromSubmissionRecursive4']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromSubmissionRecursive4']


class SubmissionIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class SubmissionArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManySubmissionArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class FeedbackIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    User: Union[bool, 'UserArgsFromSubmissionRecursive1']
    Submission: Union[bool, 'SubmissionArgsFromSubmissionRecursive1']


class FeedbackIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    User: Union[bool, 'UserArgsFromSubmissionRecursive2']
    Submission: Union[bool, 'SubmissionArgsFromSubmissionRecursive2']


class FeedbackIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    User: Union[bool, 'UserArgsFromSubmissionRecursive3']
    Submission: Union[bool, 'SubmissionArgsFromSubmissionRecursive3']


class FeedbackIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    User: Union[bool, 'UserArgsFromSubmissionRecursive4']
    Submission: Union[bool, 'SubmissionArgsFromSubmissionRecursive4']


class FeedbackIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class FeedbackArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManyFeedbackArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    


FindManySubmissionArgs = FindManySubmissionArgsFromSubmission
FindFirstSubmissionArgs = FindManySubmissionArgsFromSubmission


    

class SubmissionWhereInput(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    projectId: Union[_str, 'types.StringFilter']
    week: Union[_int, 'types.IntFilter']
    progressRate: Union[None, _int, 'types.IntFilter']
    progressComment: Union[None, _str, 'types.StringFilter']
    outputUrl: Union[None, _str, 'types.StringFilter']
    isActiveWeek: Union[_bool, 'types.BooleanFilter']
    submissionStatus: Union[_str, 'types.StringFilter']
    Project: 'ProjectRelationFilter'
    Feedback: 'FeedbackListRelationFilter'

    # should be noted that AND and NOT should be Union['SubmissionWhereInputRecursive1', List['SubmissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SubmissionWhereInputRecursive1']
    OR: List['SubmissionWhereInputRecursive1']
    NOT: List['SubmissionWhereInputRecursive1']


class SubmissionWhereInputRecursive1(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    projectId: Union[_str, 'types.StringFilter']
    week: Union[_int, 'types.IntFilter']
    progressRate: Union[None, _int, 'types.IntFilter']
    progressComment: Union[None, _str, 'types.StringFilter']
    outputUrl: Union[None, _str, 'types.StringFilter']
    isActiveWeek: Union[_bool, 'types.BooleanFilter']
    submissionStatus: Union[_str, 'types.StringFilter']
    Project: 'ProjectRelationFilter'
    Feedback: 'FeedbackListRelationFilter'

    # should be noted that AND and NOT should be Union['SubmissionWhereInputRecursive2', List['SubmissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SubmissionWhereInputRecursive2']
    OR: List['SubmissionWhereInputRecursive2']
    NOT: List['SubmissionWhereInputRecursive2']


class SubmissionWhereInputRecursive2(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    projectId: Union[_str, 'types.StringFilter']
    week: Union[_int, 'types.IntFilter']
    progressRate: Union[None, _int, 'types.IntFilter']
    progressComment: Union[None, _str, 'types.StringFilter']
    outputUrl: Union[None, _str, 'types.StringFilter']
    isActiveWeek: Union[_bool, 'types.BooleanFilter']
    submissionStatus: Union[_str, 'types.StringFilter']
    Project: 'ProjectRelationFilter'
    Feedback: 'FeedbackListRelationFilter'

    # should be noted that AND and NOT should be Union['SubmissionWhereInputRecursive3', List['SubmissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SubmissionWhereInputRecursive3']
    OR: List['SubmissionWhereInputRecursive3']
    NOT: List['SubmissionWhereInputRecursive3']


class SubmissionWhereInputRecursive3(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    projectId: Union[_str, 'types.StringFilter']
    week: Union[_int, 'types.IntFilter']
    progressRate: Union[None, _int, 'types.IntFilter']
    progressComment: Union[None, _str, 'types.StringFilter']
    outputUrl: Union[None, _str, 'types.StringFilter']
    isActiveWeek: Union[_bool, 'types.BooleanFilter']
    submissionStatus: Union[_str, 'types.StringFilter']
    Project: 'ProjectRelationFilter'
    Feedback: 'FeedbackListRelationFilter'

    # should be noted that AND and NOT should be Union['SubmissionWhereInputRecursive4', List['SubmissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SubmissionWhereInputRecursive4']
    OR: List['SubmissionWhereInputRecursive4']
    NOT: List['SubmissionWhereInputRecursive4']


class SubmissionWhereInputRecursive4(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    projectId: Union[_str, 'types.StringFilter']
    week: Union[_int, 'types.IntFilter']
    progressRate: Union[None, _int, 'types.IntFilter']
    progressComment: Union[None, _str, 'types.StringFilter']
    outputUrl: Union[None, _str, 'types.StringFilter']
    isActiveWeek: Union[_bool, 'types.BooleanFilter']
    submissionStatus: Union[_str, 'types.StringFilter']
    Project: 'ProjectRelationFilter'
    Feedback: 'FeedbackListRelationFilter'



# aggregate Submission types


    

class SubmissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    projectId: Union[_str, 'types.StringWithAggregatesFilter']
    week: Union[_int, 'types.IntWithAggregatesFilter']
    progressRate: Union[_int, 'types.IntWithAggregatesFilter']
    progressComment: Union[_str, 'types.StringWithAggregatesFilter']
    outputUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isActiveWeek: Union[_bool, 'types.BooleanWithAggregatesFilter']
    submissionStatus: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SubmissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SubmissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SubmissionScalarWhereWithAggregatesInputRecursive1']


class SubmissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    projectId: Union[_str, 'types.StringWithAggregatesFilter']
    week: Union[_int, 'types.IntWithAggregatesFilter']
    progressRate: Union[_int, 'types.IntWithAggregatesFilter']
    progressComment: Union[_str, 'types.StringWithAggregatesFilter']
    outputUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isActiveWeek: Union[_bool, 'types.BooleanWithAggregatesFilter']
    submissionStatus: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SubmissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SubmissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SubmissionScalarWhereWithAggregatesInputRecursive2']


class SubmissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    projectId: Union[_str, 'types.StringWithAggregatesFilter']
    week: Union[_int, 'types.IntWithAggregatesFilter']
    progressRate: Union[_int, 'types.IntWithAggregatesFilter']
    progressComment: Union[_str, 'types.StringWithAggregatesFilter']
    outputUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isActiveWeek: Union[_bool, 'types.BooleanWithAggregatesFilter']
    submissionStatus: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SubmissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SubmissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SubmissionScalarWhereWithAggregatesInputRecursive3']


class SubmissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    projectId: Union[_str, 'types.StringWithAggregatesFilter']
    week: Union[_int, 'types.IntWithAggregatesFilter']
    progressRate: Union[_int, 'types.IntWithAggregatesFilter']
    progressComment: Union[_str, 'types.StringWithAggregatesFilter']
    outputUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isActiveWeek: Union[_bool, 'types.BooleanWithAggregatesFilter']
    submissionStatus: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SubmissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SubmissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SubmissionScalarWhereWithAggregatesInputRecursive4']


class SubmissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    projectId: Union[_str, 'types.StringWithAggregatesFilter']
    week: Union[_int, 'types.IntWithAggregatesFilter']
    progressRate: Union[_int, 'types.IntWithAggregatesFilter']
    progressComment: Union[_str, 'types.StringWithAggregatesFilter']
    outputUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isActiveWeek: Union[_bool, 'types.BooleanWithAggregatesFilter']
    submissionStatus: Union[_str, 'types.StringWithAggregatesFilter']



class SubmissionGroupByOutput(TypedDict, total=False):
    id: _str
    projectId: _str
    week: _int
    progressRate: _int
    progressComment: _str
    outputUrl: _str
    isActiveWeek: _bool
    submissionStatus: _str
    _sum: 'SubmissionSumAggregateOutput'
    _avg: 'SubmissionAvgAggregateOutput'
    _min: 'SubmissionMinAggregateOutput'
    _max: 'SubmissionMaxAggregateOutput'
    _count: 'SubmissionCountAggregateOutput'


class SubmissionAvgAggregateOutput(TypedDict, total=False):
    """Submission output for aggregating averages"""
    week: float
    progressRate: float


class SubmissionSumAggregateOutput(TypedDict, total=False):
    """Submission output for aggregating sums"""
    week: _int
    progressRate: _int


class SubmissionScalarAggregateOutput(TypedDict, total=False):
    """Submission output including scalar fields"""
    id: _str
    projectId: _str
    week: _int
    progressRate: _int
    progressComment: _str
    outputUrl: _str
    isActiveWeek: _bool
    submissionStatus: _str


SubmissionMinAggregateOutput = SubmissionScalarAggregateOutput
SubmissionMaxAggregateOutput = SubmissionScalarAggregateOutput


class SubmissionMaxAggregateInput(TypedDict, total=False):
    """Submission input for aggregating by max"""
    id: bool
    projectId: bool
    week: bool
    progressRate: bool
    progressComment: bool
    outputUrl: bool
    isActiveWeek: bool
    submissionStatus: bool


class SubmissionMinAggregateInput(TypedDict, total=False):
    """Submission input for aggregating by min"""
    id: bool
    projectId: bool
    week: bool
    progressRate: bool
    progressComment: bool
    outputUrl: bool
    isActiveWeek: bool
    submissionStatus: bool


class SubmissionNumberAggregateInput(TypedDict, total=False):
    """Submission input for aggregating numbers"""
    week: bool
    progressRate: bool


SubmissionAvgAggregateInput = SubmissionNumberAggregateInput
SubmissionSumAggregateInput = SubmissionNumberAggregateInput


SubmissionCountAggregateInput = TypedDict(
    'SubmissionCountAggregateInput',
    {
        'id': bool,
        'projectId': bool,
        'week': bool,
        'progressRate': bool,
        'progressComment': bool,
        'outputUrl': bool,
        'isActiveWeek': bool,
        'submissionStatus': bool,
        '_all': bool,
    },
    total=False,
)

SubmissionCountAggregateOutput = TypedDict(
    'SubmissionCountAggregateOutput',
    {
        'id': int,
        'projectId': int,
        'week': int,
        'progressRate': int,
        'progressComment': int,
        'outputUrl': int,
        'isActiveWeek': int,
        'submissionStatus': int,
        '_all': int,
    },
    total=False,
)


SubmissionKeys = Literal[
    'id',
    'projectId',
    'week',
    'progressRate',
    'progressComment',
    'outputUrl',
    'isActiveWeek',
    'submissionStatus',
    'Project',
    'Feedback',
]
SubmissionScalarFieldKeys = Literal[
    'id',
    'projectId',
    'week',
    'progressRate',
    'progressComment',
    'outputUrl',
    'isActiveWeek',
    'submissionStatus',
]
SubmissionScalarFieldKeysT = TypeVar('SubmissionScalarFieldKeysT', bound=SubmissionScalarFieldKeys)

SubmissionRelationalFieldKeys = Literal[
        'Project',
        'Feedback',
    ]

# Feedback types

class FeedbackOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Feedback create method"""
    id: _str
    submissionId: _str
    userId: _str
    User: 'UserCreateNestedWithoutRelationsInput'
    Submission: 'SubmissionCreateNestedWithoutRelationsInput'


class FeedbackCreateInput(FeedbackOptionalCreateInput):
    """Required arguments to the Feedback create method"""
    evaluationRate: _int
    evaluationComment: _str
    isAnonymous: _bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class FeedbackOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Feedback create method, without relations"""
    id: _str
    submissionId: _str
    userId: _str


class FeedbackCreateWithoutRelationsInput(FeedbackOptionalCreateWithoutRelationsInput):
    """Required arguments to the Feedback create method, without relations"""
    evaluationRate: _int
    evaluationComment: _str
    isAnonymous: _bool

class FeedbackConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'FeedbackCreateWithoutRelationsInput'
    where: 'FeedbackWhereUniqueInput'

class FeedbackCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'FeedbackCreateWithoutRelationsInput'
    connect: 'FeedbackWhereUniqueInput'
    connect_or_create: 'FeedbackConnectOrCreateWithoutRelationsInput'


class FeedbackCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['FeedbackCreateWithoutRelationsInput', List['FeedbackCreateWithoutRelationsInput']]
    connect: Union['FeedbackWhereUniqueInput', List['FeedbackWhereUniqueInput']]
    connect_or_create: Union['FeedbackConnectOrCreateWithoutRelationsInput', List['FeedbackConnectOrCreateWithoutRelationsInput']]

_FeedbackWhereUnique_id_Input = TypedDict(
    '_FeedbackWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

FeedbackWhereUniqueInput = _FeedbackWhereUnique_id_Input


class FeedbackUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    evaluationRate: Union[AtomicIntInput, _int]
    evaluationComment: _str
    isAnonymous: _bool
    User: 'UserUpdateOneWithoutRelationsInput'
    Submission: 'SubmissionUpdateOneWithoutRelationsInput'


class FeedbackUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    evaluationRate: Union[AtomicIntInput, _int]
    evaluationComment: _str
    isAnonymous: _bool


class FeedbackUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['FeedbackCreateWithoutRelationsInput']
    connect: List['FeedbackWhereUniqueInput']
    connect_or_create: List['FeedbackConnectOrCreateWithoutRelationsInput']
    set: List['FeedbackWhereUniqueInput']
    disconnect: List['FeedbackWhereUniqueInput']
    delete: List['FeedbackWhereUniqueInput']

    # TODO
    # update: List['FeedbackUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['FeedbackUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['FeedbackScalarWhereInput']
    # upsert: List['FeedbackUpserteWithWhereUniqueWithoutRelationsInput']


class FeedbackUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'FeedbackCreateWithoutRelationsInput'
    connect: 'FeedbackWhereUniqueInput'
    connect_or_create: 'FeedbackConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'FeedbackUpdateInput'
    # upsert: 'FeedbackUpsertWithoutRelationsInput'


class FeedbackUpsertInput(TypedDict):
    create: 'FeedbackCreateInput'
    update: 'FeedbackUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Feedback_id_OrderByInput = TypedDict(
    '_Feedback_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Feedback_submissionId_OrderByInput = TypedDict(
    '_Feedback_submissionId_OrderByInput',
    {
        'submissionId': 'SortOrder',
    },
    total=True
)

_Feedback_userId_OrderByInput = TypedDict(
    '_Feedback_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Feedback_evaluationRate_OrderByInput = TypedDict(
    '_Feedback_evaluationRate_OrderByInput',
    {
        'evaluationRate': 'SortOrder',
    },
    total=True
)

_Feedback_evaluationComment_OrderByInput = TypedDict(
    '_Feedback_evaluationComment_OrderByInput',
    {
        'evaluationComment': 'SortOrder',
    },
    total=True
)

_Feedback_isAnonymous_OrderByInput = TypedDict(
    '_Feedback_isAnonymous_OrderByInput',
    {
        'isAnonymous': 'SortOrder',
    },
    total=True
)

_Feedback_RelevanceInner = TypedDict(
    '_Feedback_RelevanceInner',
    {
        'fields': 'List[FeedbackScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Feedback_RelevanceOrderByInput = TypedDict(
    '_Feedback_RelevanceOrderByInput',
    {
        '_relevance': '_Feedback_RelevanceInner',
    },
    total=True
)

FeedbackOrderByInput = Union[
    '_Feedback_id_OrderByInput',
    '_Feedback_submissionId_OrderByInput',
    '_Feedback_userId_OrderByInput',
    '_Feedback_evaluationRate_OrderByInput',
    '_Feedback_evaluationComment_OrderByInput',
    '_Feedback_isAnonymous_OrderByInput',
    '_Feedback_RelevanceOrderByInput',
]



# recursive Feedback types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

FeedbackRelationFilter = TypedDict(
    'FeedbackRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class FeedbackListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class FeedbackInclude(TypedDict, total=False):
    """Feedback relational arguments"""
    User: Union[bool, 'UserArgsFromFeedback']
    Submission: Union[bool, 'SubmissionArgsFromFeedback']


    

class MessageIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""


class MessageIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""


class MessageIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""


class MessageIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""


class MessageIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class MessageArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManyMessageArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class UserIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""
    Project: Union[bool, 'FindManyProjectArgsFromFeedbackRecursive1']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromFeedbackRecursive1']


class UserIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""
    Project: Union[bool, 'FindManyProjectArgsFromFeedbackRecursive2']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromFeedbackRecursive2']


class UserIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""
    Project: Union[bool, 'FindManyProjectArgsFromFeedbackRecursive3']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromFeedbackRecursive3']


class UserIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""
    Project: Union[bool, 'FindManyProjectArgsFromFeedbackRecursive4']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromFeedbackRecursive4']


class UserIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class UserArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManyUserArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProjectIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""
    User: Union[bool, 'UserArgsFromFeedbackRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromFeedbackRecursive1']


class ProjectIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""
    User: Union[bool, 'UserArgsFromFeedbackRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromFeedbackRecursive2']


class ProjectIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""
    User: Union[bool, 'UserArgsFromFeedbackRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromFeedbackRecursive3']


class ProjectIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""
    User: Union[bool, 'UserArgsFromFeedbackRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromFeedbackRecursive4']


class ProjectIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class ProjectArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManyProjectArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class SubmissionIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""
    Project: Union[bool, 'ProjectArgsFromFeedbackRecursive1']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromFeedbackRecursive1']


class SubmissionIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""
    Project: Union[bool, 'ProjectArgsFromFeedbackRecursive2']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromFeedbackRecursive2']


class SubmissionIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""
    Project: Union[bool, 'ProjectArgsFromFeedbackRecursive3']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromFeedbackRecursive3']


class SubmissionIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""
    Project: Union[bool, 'ProjectArgsFromFeedbackRecursive4']
    Feedback: Union[bool, 'FindManyFeedbackArgsFromFeedbackRecursive4']


class SubmissionIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class SubmissionArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManySubmissionArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class FeedbackIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""
    User: Union[bool, 'UserArgsFromFeedbackRecursive1']
    Submission: Union[bool, 'SubmissionArgsFromFeedbackRecursive1']


class FeedbackIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""
    User: Union[bool, 'UserArgsFromFeedbackRecursive2']
    Submission: Union[bool, 'SubmissionArgsFromFeedbackRecursive2']


class FeedbackIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""
    User: Union[bool, 'UserArgsFromFeedbackRecursive3']
    Submission: Union[bool, 'SubmissionArgsFromFeedbackRecursive3']


class FeedbackIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""
    User: Union[bool, 'UserArgsFromFeedbackRecursive4']
    Submission: Union[bool, 'SubmissionArgsFromFeedbackRecursive4']


class FeedbackIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class FeedbackArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManyFeedbackArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    


FindManyFeedbackArgs = FindManyFeedbackArgsFromFeedback
FindFirstFeedbackArgs = FindManyFeedbackArgsFromFeedback


    

class FeedbackWhereInput(TypedDict, total=False):
    """Feedback arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    submissionId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    evaluationRate: Union[_int, 'types.IntFilter']
    evaluationComment: Union[_str, 'types.StringFilter']
    isAnonymous: Union[_bool, 'types.BooleanFilter']
    User: 'UserRelationFilter'
    Submission: 'SubmissionRelationFilter'

    # should be noted that AND and NOT should be Union['FeedbackWhereInputRecursive1', List['FeedbackWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['FeedbackWhereInputRecursive1']
    OR: List['FeedbackWhereInputRecursive1']
    NOT: List['FeedbackWhereInputRecursive1']


class FeedbackWhereInputRecursive1(TypedDict, total=False):
    """Feedback arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    submissionId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    evaluationRate: Union[_int, 'types.IntFilter']
    evaluationComment: Union[_str, 'types.StringFilter']
    isAnonymous: Union[_bool, 'types.BooleanFilter']
    User: 'UserRelationFilter'
    Submission: 'SubmissionRelationFilter'

    # should be noted that AND and NOT should be Union['FeedbackWhereInputRecursive2', List['FeedbackWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['FeedbackWhereInputRecursive2']
    OR: List['FeedbackWhereInputRecursive2']
    NOT: List['FeedbackWhereInputRecursive2']


class FeedbackWhereInputRecursive2(TypedDict, total=False):
    """Feedback arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    submissionId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    evaluationRate: Union[_int, 'types.IntFilter']
    evaluationComment: Union[_str, 'types.StringFilter']
    isAnonymous: Union[_bool, 'types.BooleanFilter']
    User: 'UserRelationFilter'
    Submission: 'SubmissionRelationFilter'

    # should be noted that AND and NOT should be Union['FeedbackWhereInputRecursive3', List['FeedbackWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['FeedbackWhereInputRecursive3']
    OR: List['FeedbackWhereInputRecursive3']
    NOT: List['FeedbackWhereInputRecursive3']


class FeedbackWhereInputRecursive3(TypedDict, total=False):
    """Feedback arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    submissionId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    evaluationRate: Union[_int, 'types.IntFilter']
    evaluationComment: Union[_str, 'types.StringFilter']
    isAnonymous: Union[_bool, 'types.BooleanFilter']
    User: 'UserRelationFilter'
    Submission: 'SubmissionRelationFilter'

    # should be noted that AND and NOT should be Union['FeedbackWhereInputRecursive4', List['FeedbackWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['FeedbackWhereInputRecursive4']
    OR: List['FeedbackWhereInputRecursive4']
    NOT: List['FeedbackWhereInputRecursive4']


class FeedbackWhereInputRecursive4(TypedDict, total=False):
    """Feedback arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    submissionId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    evaluationRate: Union[_int, 'types.IntFilter']
    evaluationComment: Union[_str, 'types.StringFilter']
    isAnonymous: Union[_bool, 'types.BooleanFilter']
    User: 'UserRelationFilter'
    Submission: 'SubmissionRelationFilter'



# aggregate Feedback types


    

class FeedbackScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Feedback arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    submissionId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    evaluationRate: Union[_int, 'types.IntWithAggregatesFilter']
    evaluationComment: Union[_str, 'types.StringWithAggregatesFilter']
    isAnonymous: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['FeedbackScalarWhereWithAggregatesInputRecursive1']
    OR: List['FeedbackScalarWhereWithAggregatesInputRecursive1']
    NOT: List['FeedbackScalarWhereWithAggregatesInputRecursive1']


class FeedbackScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Feedback arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    submissionId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    evaluationRate: Union[_int, 'types.IntWithAggregatesFilter']
    evaluationComment: Union[_str, 'types.StringWithAggregatesFilter']
    isAnonymous: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['FeedbackScalarWhereWithAggregatesInputRecursive2']
    OR: List['FeedbackScalarWhereWithAggregatesInputRecursive2']
    NOT: List['FeedbackScalarWhereWithAggregatesInputRecursive2']


class FeedbackScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Feedback arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    submissionId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    evaluationRate: Union[_int, 'types.IntWithAggregatesFilter']
    evaluationComment: Union[_str, 'types.StringWithAggregatesFilter']
    isAnonymous: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['FeedbackScalarWhereWithAggregatesInputRecursive3']
    OR: List['FeedbackScalarWhereWithAggregatesInputRecursive3']
    NOT: List['FeedbackScalarWhereWithAggregatesInputRecursive3']


class FeedbackScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Feedback arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    submissionId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    evaluationRate: Union[_int, 'types.IntWithAggregatesFilter']
    evaluationComment: Union[_str, 'types.StringWithAggregatesFilter']
    isAnonymous: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['FeedbackScalarWhereWithAggregatesInputRecursive4']
    OR: List['FeedbackScalarWhereWithAggregatesInputRecursive4']
    NOT: List['FeedbackScalarWhereWithAggregatesInputRecursive4']


class FeedbackScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Feedback arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    submissionId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    evaluationRate: Union[_int, 'types.IntWithAggregatesFilter']
    evaluationComment: Union[_str, 'types.StringWithAggregatesFilter']
    isAnonymous: Union[_bool, 'types.BooleanWithAggregatesFilter']



class FeedbackGroupByOutput(TypedDict, total=False):
    id: _str
    submissionId: _str
    userId: _str
    evaluationRate: _int
    evaluationComment: _str
    isAnonymous: _bool
    _sum: 'FeedbackSumAggregateOutput'
    _avg: 'FeedbackAvgAggregateOutput'
    _min: 'FeedbackMinAggregateOutput'
    _max: 'FeedbackMaxAggregateOutput'
    _count: 'FeedbackCountAggregateOutput'


class FeedbackAvgAggregateOutput(TypedDict, total=False):
    """Feedback output for aggregating averages"""
    evaluationRate: float


class FeedbackSumAggregateOutput(TypedDict, total=False):
    """Feedback output for aggregating sums"""
    evaluationRate: _int


class FeedbackScalarAggregateOutput(TypedDict, total=False):
    """Feedback output including scalar fields"""
    id: _str
    submissionId: _str
    userId: _str
    evaluationRate: _int
    evaluationComment: _str
    isAnonymous: _bool


FeedbackMinAggregateOutput = FeedbackScalarAggregateOutput
FeedbackMaxAggregateOutput = FeedbackScalarAggregateOutput


class FeedbackMaxAggregateInput(TypedDict, total=False):
    """Feedback input for aggregating by max"""
    id: bool
    submissionId: bool
    userId: bool
    evaluationRate: bool
    evaluationComment: bool
    isAnonymous: bool


class FeedbackMinAggregateInput(TypedDict, total=False):
    """Feedback input for aggregating by min"""
    id: bool
    submissionId: bool
    userId: bool
    evaluationRate: bool
    evaluationComment: bool
    isAnonymous: bool


class FeedbackNumberAggregateInput(TypedDict, total=False):
    """Feedback input for aggregating numbers"""
    evaluationRate: bool


FeedbackAvgAggregateInput = FeedbackNumberAggregateInput
FeedbackSumAggregateInput = FeedbackNumberAggregateInput


FeedbackCountAggregateInput = TypedDict(
    'FeedbackCountAggregateInput',
    {
        'id': bool,
        'submissionId': bool,
        'userId': bool,
        'evaluationRate': bool,
        'evaluationComment': bool,
        'isAnonymous': bool,
        '_all': bool,
    },
    total=False,
)

FeedbackCountAggregateOutput = TypedDict(
    'FeedbackCountAggregateOutput',
    {
        'id': int,
        'submissionId': int,
        'userId': int,
        'evaluationRate': int,
        'evaluationComment': int,
        'isAnonymous': int,
        '_all': int,
    },
    total=False,
)


FeedbackKeys = Literal[
    'id',
    'submissionId',
    'userId',
    'evaluationRate',
    'evaluationComment',
    'isAnonymous',
    'User',
    'Submission',
]
FeedbackScalarFieldKeys = Literal[
    'id',
    'submissionId',
    'userId',
    'evaluationRate',
    'evaluationComment',
    'isAnonymous',
]
FeedbackScalarFieldKeysT = TypeVar('FeedbackScalarFieldKeysT', bound=FeedbackScalarFieldKeys)

FeedbackRelationalFieldKeys = Literal[
        'User',
        'Submission',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields